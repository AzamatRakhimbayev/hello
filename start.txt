Конечно, вот сводный "рабочий журнал" команд, которые мы успешно использовали на протяжении нашей сессии:

Рабочий журнал команд (Git):

    Обновление списка пакетов (если необходимо):
    Bash

sudo apt update

Установка Git:
Bash

sudo apt install git

Проверка установки Git:
Bash

git --version

Настройка имени пользователя Git (глобально):
Bash

git config --global user.name "Твое Имя"

(Замени "Твое Имя" на свое имя)

Настройка адреса электронной почты Git (глобально):
Bash

git config --global user.email "твоя_электронная_почта@example.com"

(Замени "твоя_электронная_почта@example.com" на свой email)

Переход в директорию проекта:
Bash

cd /путь/к/твоему/golang-проекту

(Замени /путь/к/твоему/golang-проекту на фактический путь)

Инициализация Git в проекте:
Bash

git init

Добавление файлов в индекс:
Bash

git add .

(Или git add <имя_файла>)

Создание коммита:
Bash

git commit -m "Первый коммит (или описание изменений)"

Создание репозитория на GitHub (через веб-сайт).

Копирование URL репозитория GitHub.

Добавление удаленного репозитория origin:
Bash

git remote add origin <URL_твоего_репозитория>

(Замени <URL_твоего_репозитория> на скопированный URL)

Проверка списка удаленных репозиториев:
bash git remote -v

Отправка кода на GitHub:
Bash

git push -u origin main

(Или git push -u origin master, в зависимости от имени твоей основной ветки. В последующих push можно использовать просто git push)

Просмотр локальных веток:
Bash

    git branch

Рабочий журнал команд (Docker):

    Обновление списка пакетов:
    Bash

sudo apt update

Установка необходимых пакетов:
Bash

sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release

Добавление ключа GPG Docker:
Bash

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Добавление репозитория Docker в источники APT:
Bash

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Обновление списка пакетов:
Bash

sudo apt update

Установка Docker Engine:
Bash

sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin

Проверка установки Docker:
Bash

sudo docker run hello-world

Переход в корневую директорию проекта:
Bash

cd /путь/к/твоему/golang-проекту

Создание файла Dockerfile:
Bash

touch Dockerfile

Редактирование файла Dockerfile (согласно финальному варианту для проекта без зависимостей).

Сборка Docker-образа:
Bash

docker build -t my-go-app .

Запуск Docker-контейнера:
Bash

docker run --name my-running-app my-go-app

(или с пробросом порта, если необходимо)

Добавление Dockerfile в Git:
Bash

git add Dockerfile

Создание коммита с Dockerfile:
Bash

git commit -m "Добавлен Dockerfile для контейнеризации приложения"

Отправка изменений на GitHub:
Bash

    git push origin main

    (или git push origin master)

Этот лог содержит основные команды, которые мы использовали. Ты можешь использовать его для повторения всех шагов.